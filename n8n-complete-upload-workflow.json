{
  "name": "Complete ImageMagick Processing with Upload",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "upload-and-process",
        "options": {
          "noResponseBody": false
        }
      },
      "id": "webhook-upload",
      "name": "File Upload Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [240, 300],
      "webhookId": "upload-process-webhook"
    },
    {
      "parameters": {
        "jsCode": "// Extract form data and file from webhook request\nconst body = $input.all()[0].body;\nconst files = $input.all()[0].binary;\n\n// Get processing parameters from form data\nconst action = body.action || 'resize';\nconst resizePercentage = body.resize_percentage || '50';\nconst quality = body.quality || '85';\nconst format = body.format || 'jpg';\nconst degrees = body.degrees || '90';\nconst brightness = body.brightness || '110';\nconst contrast = body.contrast || '110';\nconst saturation = body.saturation || '120';\n\n// Validate that a file was uploaded\nif (!files || Object.keys(files).length === 0) {\n  throw new Error('No file uploaded. Please upload an image file.');\n}\n\n// Get the first uploaded file\nconst fileKey = Object.keys(files)[0];\nconst file = files[fileKey];\n\n// Validate file type\nif (!file.mimeType || !file.mimeType.startsWith('image/')) {\n  throw new Error('Invalid file type. Please upload an image file.');\n}\n\nreturn {\n  json: {\n    message: 'File received and validated',\n    filename: file.fileName || 'uploaded-image',\n    mimeType: file.mimeType,\n    fileSize: file.data.length,\n    processingParams: {\n      action: action,\n      resize_percentage: resizePercentage,\n      quality: quality,\n      format: format,\n      degrees: degrees,\n      brightness: brightness,\n      contrast: contrast,\n      saturation: saturation\n    }\n  },\n  binary: {\n    image: file\n  }\n};"
      },
      "id": "extract-and-validate",
      "name": "Extract & Validate",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [480, 300]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "resize-condition",
              "leftValue": "={{ $json.processingParams.action }}",
              "rightValue": "resize",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "action-switch",
      "name": "Action Router",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3,
      "position": [720, 300]
    },
    {
      "parameters": {
        "url": "http://127.0.0.1:5000/api/process",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "X-API-Key",
              "value": "ZWIHZc5e-SWR-XdIPykAZ3K6PncdnwBxa9VlZ9yuZ3M"
            }
          ]
        },
        "sendBody": true,
        "bodyContentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "action",
              "value": "={{ $json.processingParams.action }}"
            },
            {
              "name": "resize_percentage",
              "value": "={{ $json.processingParams.resize_percentage }}"
            },
            {
              "name": "quality",
              "value": "={{ $json.processingParams.quality }}"
            },
            {
              "name": "format",
              "value": "={{ $json.processingParams.format }}"
            },
            {
              "name": "image",
              "value": "",
              "parameterType": "formBinaryData",
              "inputDataFieldName": "image"
            }
          ]
        },
        "options": {}
      },
      "id": "resize-request",
      "name": "Resize Image",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [960, 200]
    },
    {
      "parameters": {
        "url": "http://127.0.0.1:5000/api/process",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "X-API-Key",
              "value": "ZWIHZc5e-SWR-XdIPykAZ3K6PncdnwBxa9VlZ9yuZ3M"
            }
          ]
        },
        "sendBody": true,
        "bodyContentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "action",
              "value": "={{ $json.processingParams.action }}"
            },
            {
              "name": "degrees",
              "value": "={{ $json.processingParams.degrees }}"
            },
            {
              "name": "quality",
              "value": "={{ $json.processingParams.quality }}"
            },
            {
              "name": "format",
              "value": "={{ $json.processingParams.format }}"
            },
            {
              "name": "image",
              "value": "",
              "parameterType": "formBinaryData",
              "inputDataFieldName": "image"
            }
          ]
        },
        "options": {}
      },
      "id": "rotate-request",
      "name": "Rotate Image",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [960, 300]
    },
    {
      "parameters": {
        "url": "http://127.0.0.1:5000/api/process",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "X-API-Key",
              "value": "ZWIHZc5e-SWR-XdIPykAZ3K6PncdnwBxa9VlZ9yuZ3M"
            }
          ]
        },
        "sendBody": true,
        "bodyContentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "action",
              "value": "={{ $json.processingParams.action }}"
            },
            {
              "name": "brightness",
              "value": "={{ $json.processingParams.brightness }}"
            },
            {
              "name": "contrast",
              "value": "={{ $json.processingParams.contrast }}"
            },
            {
              "name": "saturation",
              "value": "={{ $json.processingParams.saturation }}"
            },
            {
              "name": "quality",
              "value": "={{ $json.processingParams.quality }}"
            },
            {
              "name": "format",
              "value": "={{ $json.processingParams.format }}"
            },
            {
              "name": "image",
              "value": "",
              "parameterType": "formBinaryData",
              "inputDataFieldName": "image"
            }
          ]
        },
        "options": {}
      },
      "id": "enhance-request",
      "name": "Enhance Image",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [960, 400]
    },
    {
      "parameters": {
        "jsCode": "// Process the API response and create downloadable result\nconst response = items[0].json;\nconst originalData = items[0].json;\n\nif (response.success) {\n  // Decode base64 image\n  const imageData = response.data.image;\n  const buffer = Buffer.from(imageData, 'base64');\n  \n  // Create download URL\n  const downloadUrl = `http://127.0.0.1:5000/api/download/${response.data.filename}`;\n  \n  return [\n    {\n      json: {\n        success: true,\n        message: 'Image processed successfully! ðŸŽ‰',\n        processingTime: response.data.processing_time_seconds,\n        action: response.data.action,\n        originalFormat: response.data.format,\n        outputFormat: response.data.format,\n        downloadUrl: downloadUrl,\n        filename: response.data.filename,\n        fileSize: buffer.length,\n        metadata: response.metadata,\n        processingDetails: response.data\n      },\n      binary: {\n        processedImage: {\n          data: buffer,\n          mimeType: `image/${response.data.format}`,\n          fileName: `processed_${response.metadata.filename || 'image'}.${response.data.format}`,\n          fileExtension: response.data.format\n        }\n      }\n    }\n  ];\n} else {\n  return [\n    {\n      json: {\n        success: false,\n        error: 'Image processing failed: ' + (response.error || 'Unknown error'),\n        originalRequest: originalData\n      }\n    }\n  ];\n}"
      },
      "id": "process-response",
      "name": "Process Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1200, 300]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}",
        "options": {}
      },
      "id": "webhook-response",
      "name": "Send Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1440, 300]
    }
  ],
  "connections": {
    "File Upload Webhook": {
      "main": [
        [
          {
            "node": "Extract & Validate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract & Validate": {
      "main": [
        [
          {
            "node": "Action Router",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Action Router": {
      "main": [
        [
          {
            "node": "Resize Image",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Rotate Image",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Enhance Image",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Resize Image": {
      "main": [
        [
          {
            "node": "Process Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Rotate Image": {
      "main": [
        [
          {
            "node": "Process Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Enhance Image": {
      "main": [
        [
          {
            "node": "Process Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Response": {
      "main": [
        [
          {
            "node": "Send Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2024-01-01T12:00:00.000Z",
  "versionId": "1"
}
